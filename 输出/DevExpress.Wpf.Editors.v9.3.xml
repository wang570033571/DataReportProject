<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevExpress.Wpf.Editors.v9.3</name>
    </assembly>
    <members>
        <member name="T:DevExpress.Wpf.Editors.Validation.ValidateEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.Validate"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Validation.ValidateEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.ValidationEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.Validate"/> event.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		A <see cref="T:DevExpress.Wpf.Editors.ValidationEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.MemoEdit">

            <summary>
                <para>Represents a memo edit control that allows editing memo data.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.MemoEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the MemoEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.MemoAcceptsReturn">
            <summary>
                <para>Gets or sets whether an end-user can insert return characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow return characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.MemoAcceptsReturnProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.MemoAcceptsTab">
            <summary>
                <para>Gets or sets whether an end-user can insert tabulation characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow tabulation characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.MemoAcceptsTabProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.MemoHorizontalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a horizontal scroll bar is shown. This is a dependency property.

</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.MemoHorizontalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.MemoTextWrapping">
            <summary>
                <para>Gets or sets whether the text is wrapped when it reaches the edge of the memo box. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextWrapping"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.MemoTextWrappingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.MemoVerticalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a vertical scroll bar is shown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.MemoVerticalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.MemoEdit.ShowIcon">
            <summary>
                <para>Gets or sets whether an identification icon is displayed within the editor's edit region.
</para>
            </summary>
            <value><b>true</b> if the editor displays the identification icon; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MemoEdit.ShowIconProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.RadioComboBoxStyleSettings">

            <summary>
                <para>Defines the radio button list appearance for a combo box editor's dropdown window.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.RadioComboBoxStyleSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the RadioComboBoxStyleSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.EditValueChangingEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanging"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.EditValueChangingEventArgs.#ctor(System.Object,System.Object)">
            <summary>
                <para>Initializes a new instance of the EditValueChangingEventArgs class with the specified old and new edit values.

</para>
            </summary>
            <param name="oldValue">
		An object specifying the old edit value. This object is assigned to the <see cref="P:DevExpress.Wpf.Editors.EditValueChangingEventArgs.OldValue"/> property.

            </param>
            <param name="newValue">
		An object specifying the new edit value. This object is assigned to the <see cref="P:DevExpress.Wpf.Editors.EditValueChangingEventArgs.NewValue"/> property.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.EditValueChangingEventArgs.NewValue">
            <summary>
                <para>Gets or sets a new value to be assigned to the editor.
</para>
            </summary>
            <value>A <see cref="T:System.Object"/> representing the new value.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.EditValueChangingEventArgs.OldValue">
            <summary>
                <para>Gets or sets the current edit value, which should be replaced by the new value.
</para>
            </summary>
            <value>A <see cref="T:System.Object"/> representing the old value.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.MemoEditSettings">

            <summary>
                <para>Contains settings specific to a memo editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.MemoEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the MemoEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoAcceptsReturn">
            <summary>
                <para>Gets or sets whether an end-user can insert return characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow return characters to be accepted and processed by the editor; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoAcceptsReturnProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoAcceptsTab">
            <summary>
                <para>Gets or sets whether an end-user can insert tabulation characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow tabulation characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoAcceptsTabProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoHorizontalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a horizontal scroll bar is shown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoHorizontalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoTextWrapping">
            <summary>
                <para>Gets or sets whether the text is wrapped when it reaches the edge of the text box. This is a dependency property.

</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextWrapping"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoTextWrappingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoVerticalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a vertical scroll bar is shown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.MemoVerticalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.MemoEditSettings.ShowIcon">
            <summary>
                <para>Gets or sets a value specifying whether an identification icon is displayed within the editor's edit region.
</para>
            </summary>
            <value><b>true</b> if an editor displays an identification icon; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.MemoEditSettings.ShowIconProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ComboBoxStyleSettings">

            <summary>
                <para>Defines the appearance of a common item list for a combo box editor's dropdown window.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxStyleSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the ComboBoxStyleSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.SpinEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.TextEdit.Spin"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.SpinEventArgs.#ctor(System.Boolean)">
            <summary>
                <para>Initializes a new instance of the SpinEventArgs class with the specified value, indicating whether the edit value is increased or decreased.

</para>
            </summary>
            <param name="isSpinUp">
		<b>true</b> if the edit value is increased; <b>false</b> if the edit value is decreased. This Boolean value is assigned to the <see cref="P:DevExpress.Wpf.Editors.SpinEventArgs.IsSpinUp"/> property.


            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEventArgs.IsSpinUp">
            <summary>
                <para>Gets or sets whether the edit value has been increased. 
</para>
            </summary>
            <value><b>true</b> if the edit value has been increased; <b>false</b> if the edit value has been decreased.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.TextEdit">

            <summary>
                <para>Represents a text editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the TextEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.AcceptsReturn">
            <summary>
                <para>Gets or sets whether an end-user can insert return characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow return characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.AcceptsReturnProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.AcceptsTab">
            <summary>
                <para>Gets or sets whether an end-user can insert tabulation characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow tabulation characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.AcceptsTabProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.CaretIndex">
            <summary>
                <para>Gets or sets the position of the input caret.
</para>
            </summary>
            <value>A zero-based integer value that specifies the position of the input caret. If negative, an exception is thrown.
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Clear">
            <summary>
                <para>Clears all the content from the text editor.

</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Copy">
            <summary>
                <para>Copies the current selection to the clipboard.
</para>
            </summary>


        </member>
        <member name="E:DevExpress.Wpf.Editors.TextEdit.CustomDisplayText">
            <summary>
                <para>Enables you to display a custom text within the editor.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.CustomDisplayTextEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Cut">
            <summary>
                <para>Moves the current selection in the text editor to the clipboard.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Delete">
            <summary>
                <para>Deletes the currently selected text from the text editor.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.DisplayFormatString">
            <summary>
                <para>Gets or sets the pattern used to format the editor's value for display purposes.

</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that represents the format pattern.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.DisplayFormatStringProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.DisplayText">
            <summary>
                <para>Gets the text displayed within the editor. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the editor's display text.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.DisplayTextConverter">
            <summary>
                <para>Gets or sets a converter used to provide the editor's display value. This is a dependency property.
</para>
            </summary>
            <value>An object that implements the <see cref="T:System.Windows.Data.IValueConverter"/> interface.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.DisplayTextConverterProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.DisplayTextProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.EditNonEditableTemplate">
            <summary>
                <para>Gets or sets a template that defines the in-place button editor's presentation when the editor is active, but its text field is not editable. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object representing the editor's template.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.EditNonEditableTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.EndInit">
            <summary>
                <para>Notifies the editor that the initialization has been completed.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetCharacterIndexFromLineIndex(System.Int32)">
            <summary>
                <para>Returns the index of the first character in the specified line.

</para>
            </summary>
            <param name="lineIndex">
		The zero-based index of the text line.


            </param>
            <returns>The zero-based index of the first character in the specified line.


</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetCharacterIndexFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
                <para>Returns the insertion index for the specified point.

</para>
            </summary>
            <param name="point">
		The point in the editor's coordinate-space for which to return an insertion index.

            </param>
            <param name="snapToText">
		<b>true</b> to return the nearest insertion index if there is no character at the specified point; <b>false</b> to return <b>–1</b> if there is no character at the specified point.

            </param>
            <returns>The insertion index for the specified point, <b>–1</b> if the valid insertion index was not found.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetFirstVisibleLineIndex">
            <summary>
                <para>Returns the line index of the first line that is currently visible in the text box.


</para>
            </summary>
            <returns>The zero-based index of the first visible line in the text box.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetLastVisibleLineIndex">
            <summary>
                <para>Returns the line index of the last line that is entirely visible in the text box.
</para>
            </summary>
            <returns>The zero-based index of the last visible line in the text box.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetLineIndexFromCharacterIndex(System.Int32)">
            <summary>
                <para>Returns the index of the line that contains the character with the specified index.
</para>
            </summary>
            <param name="charIndex">
		The zero-based character index.


            </param>
            <returns>The zero-based index of the line that contains the character with the specified index.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetLineLength(System.Int32)">
            <summary>
                <para>Returns the number of characters in the specified line.


</para>
            </summary>
            <param name="lineIndex">
		The zero-based integer line index.

            </param>
            <returns>The number of characters in the specified line.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.GetLineText(System.Int32)">
            <summary>
                <para>Returns the text displayed on the specified line.
</para>
            </summary>
            <param name="lineIndex">
		The zero-based integer line index.


            </param>
            <returns>A <see cref="T:System.String"/> value that represets the text displayed on the specified line.
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.HorizontalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a horizontal scroll bar is shown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.HorizontalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.LineCount">
            <summary>
                <para>Gets the total number of text lines.
</para>
            </summary>
            <value>An integer value that specifies the total number of text lines.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.Mask">
            <summary>
                <para>Gets or sets a mask expression. This is a dependency property.
</para>
            </summary>
            <value>A string representing a mask expression. 
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskAllowNullInput">
            <summary>
                <para>Gets or sets whether end-users can set the editor's value to a null reference.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if end-users can set the editor's value to a null reference; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskAllowNullInputProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskAutoComplete">
            <summary>
                <para>Gets or sets the automatic completion mode used by the editor in the RegEx mask mode. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.AutoCompleteType"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskAutoCompleteProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskBeepOnError">
            <summary>
                <para>Gets or sets whether an editor beeps when an end-user tries to enter an invalid character. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor sounds a beep when an end-user tries to enter an invalid character; otherwise, <b>false</b>. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskBeepOnErrorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskCulture">
            <summary>
                <para>Gets or sets the culture whose settings are used by masks. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Globalization.CultureInfo"/> object whose settings are used by masks.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskCultureProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskIgnoreBlank">
            <summary>
                <para>Gets or sets whether the editor can lose focus when a value hasn't been entered, for the <b>Simple</b>, <b>Regular</b> and <b>RegEx</b> mask types. This is a dependency property.

</para>
            </summary>
            <value><b>true</b> if the editor can lose focus when a value has not been entered; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskIgnoreBlankProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskPlaceHolder">
            <summary>
                <para>Gets or sets the character used as the placeholder in a masked editor, for the <b>Simple</b>, <b>Regular</b> and <b>RegEx</b> mask types. This is a dependency property.
</para>
            </summary>
            <value>The character used as the placeholder in a masked editor.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskPlaceHolderProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskSaveLiteral">
            <summary>
                <para>Gets or sets whether constantly displayed mask characters (literals) are included in an editor's value, for the <b>Simple</b> and <b>Regular</b> mask types. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the constantly displayed mask characters are included in an editor's value; otherwise, <b>false</b>. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskSaveLiteralProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskShowPlaceHolders">
            <summary>
                <para>Gets or sets whether placeholders are displayed in a masked editor, for the <b>RegEx</b> mask type. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to display placeholders in a masked editor; otherwise <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskShowPlaceHoldersProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskType">
            <summary>
                <para>Gets or sets the mask type. This is a dependency property.

</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.MaskType"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskTypeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.MaskUseAsDisplayFormat">
            <summary>
                <para>Gets or sets whether display values are still formatted using the mask when the editor is not focused. This is a dependency property.

</para>
            </summary>
            <value><b>true</b> if the mask settings are used to format display values when the editor is not focused; <b>false</b> if the settings specified by the <see cref="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormat"/> property are used.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.MaskUseAsDisplayFormatProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Paste">
            <summary>
                <para>Replaces the current selection in the text editor with the contents of the clipboard.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Select(System.Int32,System.Int32)">
            <summary>
                <para>Selects the specified number of characters in the text editor, starting from the point specified.
</para>
            </summary>
            <param name="start">
		An integer value specifying the selection's start point in the text editor.

            </param>
            <param name="length">
		An integer value specifying the number of characters to select in the text editor.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.SelectAll">
            <summary>
                <para>Selects all the text within the text editor.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.SelectAllOnGotFocus">
            <summary>
                <para>Gets or sets whether to select the entire text when the editor gets focus for the first time.
</para>
            </summary>
            <value><b>true</b> to select the text on focus for the first time; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.SelectAllOnGotFocusProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.SelectedText">
            <summary>
                <para>Gets or sets the selected text.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the text selected within the text editor.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.SelectionLength">
            <summary>
                <para>Gets or sets the number of selected characters.
</para>
            </summary>
            <value>An integer value that specifies the number of selected characters.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.SelectionStart">
            <summary>
                <para>Gets or sets a character index at which the selection starts.
</para>
            </summary>
            <value>An integer value that specifies the index of a character at which the selection starts.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.ShowTooltipForTrimmedText">
            <summary>
                <para>Gets or sets whether to invoke a tooltip for the editor whose content is trimmed.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if a tooltip should be displayed; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.ShowTooltipForTrimmedTextProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.TextEdit.Spin">
            <summary>
                <para>Occurs when the UP or DOWN ARROW key is pressed, or the mouse wheel is rotated.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.SpinDown">
            <summary>
                <para>Decrements the value of a masked editor.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.SpinDownCommand">
            <summary>
                <para>Decrements the value of a masked editor.
</para>
            </summary>
            <returns> 
</returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.SpinEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.SpinUp">
            <summary>
                <para>Increments the value of a masked editor.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.SpinUpCommand">
            <summary>
                <para>Increments the value of a masked editor.
</para>
            </summary>
            <returns> 
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.Text">
            <summary>
                <para>Gets or sets the text. This is a dependency property.

</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the text displayed within the editor.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.TextProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.TextTrimming">
            <summary>
                <para>Gets or sets the text trimming behavior.
This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextTrimming"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.TextTrimmingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.TextWrapping">
            <summary>
                <para>Gets or sets whether the text wraps when it reaches the edge of the text box. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextWrapping"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.TextWrappingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.TextEdit.Undo">
            <summary>
                <para>Undoes the last edit operation in the text control.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.TextEdit.VerticalScrollBarVisibility">
            <summary>
                <para>Gets or sets whether a vertical scroll bar is shown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> enumeration value that specifies the scroll bar's visibility.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.TextEdit.VerticalScrollBarVisibilityProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.EditValueChangingEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanging"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.EditValueChangingEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.EditValueChangingEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanging"/> event.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		An <see cref="T:DevExpress.Wpf.Editors.EditValueChangingEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.MaskType">

            <summary>
                <para>Lists values that specify the type of mask used by an editor. 
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.DateTime">
            <summary>
                <para>Specifies that the editor should accept date/time values, and that the mask string must use the DateTime format syntax.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.DateTimeAdvancingCaret">
            <summary>
                <para>The DateTime mask mode with the caret automatic movement feature.
<para>
After an end-user enters and completes a specific portion of a date/time value, the caret automatically moves to the following part of the date/time value that can be edited. 
</para>
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.None">
            <summary>
                <para>Specifies that the mask feature is disabled.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.Numeric">
            <summary>
                <para>Specifies that the editor should accept numeric values, and that the mask string must use the Numeric format syntax.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.RegEx">
            <summary>
                <para>Specifies that the mask should be created using the full-functional regular expressions.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.Regular">
            <summary>
                <para>Specifies that the mask should be created using the simplified regular expression syntax.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.MaskType.Simple">
            <summary>
                <para>Specifies that the mask should use the simplified syntax.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.CheckEditBox">

            <summary>
                <para>Represents a check box used by the <see cref="T:DevExpress.Wpf.Editors.CheckEdit"/> control.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.CheckEditBox.#ctor">
            <summary>
                <para>Initializes a new instance of the CheckEditBox class with default settings.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.SpinEdit">

            <summary>
                <para>Represents an editor with spin buttons used to adjust a numerical value.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.SpinEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the SpinEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEdit.Increment">
            <summary>
                <para>Gets or sets a value by which the editor's value changes each time the editor is spun.
This is a dependency property.
</para>
            </summary>
            <value>A decimal value representing the increment for the spin editor. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.IncrementProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEdit.IsFloatValue">
            <summary>
                <para>Gets or sets whether the editor's value is a float.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor's value is a float; <b>false</b> if the editor's value is an integer.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.IsFloatValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.SpinEdit.Maximize">
            <summary>
                <para>Sets the editor's value to the maximum allowed value.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.MaximizeCommand">
            <summary>
                <para> Sets the editor's <see cref="P:DevExpress.Wpf.Editors.BaseEdit.EditValue"/> property to the value of the <see cref="P:DevExpress.Wpf.Editors.SpinEdit.MaxValue"/> property.
</para>
            </summary>
            <returns> 
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEdit.MaxValue">
            <summary>
                <para>Gets or sets the editor's maximum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Decimal"/> value that specifies the maximum allowed value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.MaxValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.SpinEdit.Minimize">
            <summary>
                <para>Sets the editor's value to the minimum allowed value.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.MinimizeCommand">
            <summary>
                <para>Sets the editor's <see cref="P:DevExpress.Wpf.Editors.BaseEdit.EditValue"/> property to the value of the <see cref="P:DevExpress.Wpf.Editors.SpinEdit.MinValue"/> property.
</para>
            </summary>
            <returns> 
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEdit.MinValue">
            <summary>
                <para>Gets or sets the editor's minimum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Decimal"/> value which represents the minimum allowed value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.MinValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.SpinEdit.Value">
            <summary>
                <para>Gets or sets a spin editor's value.
This is a dependency property.
</para>
            </summary>
            <value>A decimal value specifying the editor's value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.SpinEdit.ValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings">

            <summary>
                <para>Serves as a base for classes that contain settings specific to popup editors (e.g. <see cref="T:DevExpress.Wpf.Editors.Settings.DateEditSettings"/>, <see cref="T:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings"/>).
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the PopupBaseEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.IsSharedPopupSize">
            <summary>
                <para>Gets or sets whether the dropdown's size is shared between multiple popup editors created from the PopupBaseEditSettings class. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to share the dropdown's size between multiple popup editors; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.IsSharedPopupSizeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupContentTemplate">
            <summary>
                <para>Gets or sets a template that presents the popup window's content.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object that presents the popup window's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupFooterButtons">
            <summary>
                <para>Gets or sets which buttons are displayed within the editor's drop-down. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.PopupFooterButtons"/> enumeration value that specifies which buttons are displayed within the editor's drop-down.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupFooterButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupHeight">
            <summary>
                <para>Gets or sets the popup window's height.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's height.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMaxHeight">
            <summary>
                <para>Gets or sets the popup window's maximum height.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's maximum height.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMaxHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMaxWidth">
            <summary>
                <para>Gets or sets the popup window's maximum width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's maximum width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMaxWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMinHeight">
            <summary>
                <para>Gets or sets the popup window's minimum height.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's minimum height.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMinHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMinWidth">
            <summary>
                <para>Gets or sets the popup window's minimum width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the pop-up window's minimum width.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupMinWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupWidth">
            <summary>
                <para>Gets or sets the popup window's width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.PopupWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.ShowSizeGrip">
            <summary>
                <para>Gets or sets whether to show the size grip within the editor's drop-down.
</para>
            </summary>
            <value>A <see cref="T:System.Boolean"/> value that specifies whether to show the size grip within the editor's drop-down.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.PopupBaseEditSettings.ShowSizeGripProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings">

            <summary>
                <para>Contains settings specific to a combobox editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the ComboBoxEditSettings class with default settings.

</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ApplyItemTemplateToSelectedItem">
            <summary>
                <para>Gets or sets whether to apply the <see cref="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemTemplate"/> to the selected item, dipslayed within a text box. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to apply the item template to the selected item; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ApplyItemTemplateToSelectedItemProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.DisplayMember">
            <summary>
                <para>Gets or sets a field name in the bound data source whose contents are to be displayed by the combo box editor. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the field name in a bound data source.
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.GetDisplayText(System.Object,System.Boolean)">
            <summary>
                <para>Returns the display representation of the specified value.
</para>
            </summary>
            <param name="editValue">
		An object that represents the value to format.

            </param>
            <param name="applyFormatting">
		<b>true</b> to apply formatting specified by the <see cref="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormat"/> property; otherwise, <b>false</b>.

            </param>
            <returns>A <see cref="T:System.String"/> value that represents the specified value formatted for display purposes.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.GetItemFromValue(System.Object)">
            <summary>
                <para>Returns a combobox item with the specified value.
</para>
            </summary>
            <param name="value">
		An object that represents the item's value.


            </param>
            <returns>An object that represents the combobox item.

</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.GetValueFromItem(System.Object)">
            <summary>
                <para>Returns the value of the specified combobox item.
</para>
            </summary>
            <param name="item">
		An object that represents the combobox item.


            </param>
            <returns>An object that represents the item's value.

</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.Items">
            <summary>
                <para>Provides access to the collection of items when the editor is not bound to a data source.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.ComboBoxItemCollection"/> object that represents the collection of items.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemsPanel">
            <summary>
                <para>Gets or sets the template that defines the presentation of a container panel used by the editor to arrange its items. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ItemsPanelTemplate"/> object that arranges items.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemsPanelProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemsSource">
            <summary>
                <para>Gets or sets the data source.
</para>
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.IEnumerable"/> interface.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemsSourceProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of items contained within the editor's dropdown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the template which defines the presentation of items contained within the dropdown.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemTemplateSelector">
            <summary>
                <para>Gets or sets an object that chooses a list item template based on custom logic.
This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.DataTemplateSelector"/> descendant that applies a template based on custom logic.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ItemTemplateSelectorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.StyleSettings">
            <summary>
                <para>Gets or sets an object that defines the appearance of the editor's drop-down list. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.BaseComboBoxStyleSettings"/> descendant that defines the appearance of the editor's drop-down list.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.StyleSettingsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings.ValueMember">
            <summary>
                <para>Gets or sets a field name in the bound data source whose contents are assigned to item values. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the field name in a bound data source.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.ButtonEditSettings">

            <summary>
                <para>Contains settings specific to a button editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the ButtonEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.AllowDefaultButton">
            <summary>
                <para>Gets or sets whether the editor's default button is displayed. This is a dependency property. 
</para>
            </summary>
            <value><b>true</b> to display the editor's default button; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.AllowDefaultButtonProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.Buttons">
            <summary>
                <para>Returns the collection of buttons.

</para>
            </summary>
            <value>The collection of <see cref="T:DevExpress.Wpf.Editors.ButtonInfoBase"/> descendants that represent the editor's buttons.
</value>


        </member>
        <member name="E:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.DefaultButtonClick">
            <summary>
                <para>Occurs when an editor's default button is clicked.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.IsTextEditable">
            <summary>
                <para>Gets or sets whether an end-user is allowed to edit the text within the editor's edit box. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow an end-user to edit the text displayed within the edit box; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.ButtonEditSettings.IsTextEditableProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.BaseEditSettings">

            <summary>
                <para>Serves as the base class for the editor settings classes that define the behavior of editors allowing data input.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the BaseEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.ApplyToEdit(DevExpress.Wpf.Editors.BaseEdit,System.Boolean,DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo)">
            <summary>
                <para>Assigns the editor settings to the specified editor.
</para>
            </summary>
            <param name="edit">
		A <see cref="T:DevExpress.Wpf.Editors.BaseEdit"/> class descendant that represents the target editor.

            </param>
            <param name="assignEditorSettings">
		<b>true</b> to assign the current editor's settings to the target editor; otherwise, <b>false</b>.


            </param>
            <param name="defaultViewInfo">
		An object implementing the <see cref="T:DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo"/> interface, containing editor settings (e.g. <see cref="T:DevExpress.Wpf.Grid.GridColumn"/>).

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.CreateEditor(System.Boolean,DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo)">
            <summary>
                <para>Creates an editor object based upon the current editor settings.
</para>
            </summary>
            <param name="assignEditorSettings">
		<b>true</b> to assign the current editor's settings to the new editor; otherwise, <b>false</b>.

            </param>
            <param name="defaultViewInfo">
		An object that implements the <see cref="T:DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo"/> interface, containing editor settings (e.g. horizontal content alignment).

            </param>
            <returns>A <see cref="T:DevExpress.Wpf.Editors.BaseEdit"/> descendant that represents the new editor.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.CreateEditor(DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo)">
            <summary>
                <para>Creates an editor object based upon the current editor settings.
</para>
            </summary>
            <param name="defaultViewInfo">
		An object that implements the <see cref="T:DevExpress.Wpf.Editors.Settings.IDefaultEditorViewInfo"/> interface, containing editor settings (e.g. horizontal content alignment).

            </param>
            <returns>A <see cref="T:DevExpress.Wpf.Editors.BaseEdit"/> descendant that represents the new editor.
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormat">
            <summary>
                <para>Gets or sets the pattern used to format the editor's value for display purposes. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that represents the format pattern.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormatProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.GetDisplayText(System.Object,System.Boolean)">
            <summary>
                <para>Returns the display representation of the specified value.

</para>
            </summary>
            <param name="editValue">
		An object that represents the value to format.


            </param>
            <param name="applyFormatting">
		<b>true</b> to apply formatting specified by the <see cref="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormat"/> property; otherwise, <b>false</b>.

            </param>
            <returns>A <see cref="T:System.String"/> value that represents the specified value formatted for display purposes.

</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.BaseEditSettings.GetDisplayTextFromEditor(System.Object)">
            <summary>
                <para>Returns the display representation of the specified value.
</para>
            </summary>
            <param name="editValue">
		An object that represents the value to be formatted.

            </param>
            <returns>A <see cref="T:System.String"/> value that represents the specified value formatted for display purposes.
</returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.Settings.BaseEditSettings.GetIsActivatingKey">
            <summary>
                <para>For internal use only.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.HorizontalContentAlignment">
            <summary>
                <para>Gets or sets the horizontal alignment of an editor's contents.
</para>
            </summary>
            <value>An <see cref="T:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment"/> enumeration member.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.BaseEditSettings.HorizontalContentAlignmentProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.MaxWidth">
            <summary>
                <para>Gets or sets the editor's maximum width. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the editor's maximum width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.BaseEditSettings.MaxWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.Settings.BaseEditSettings.ProcessActivatingKey">
            <summary>
                <para>For internal use only.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.VerticalContentAlignment">
            <summary>
                <para>Gets or sets the vertical alignment of the editor's contents.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.VerticalAlignment"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.BaseEditSettings.VerticalContentAlignmentProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Popups.SelectionEventMode">

            <summary>
                <para>Contains values that specify when the <see cref="E:DevExpress.Wpf.Editors.ComboBoxEdit.PopupListBoxSelectionChanged"/> event occurs for a combo box editor.
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.Popups.SelectionEventMode.MouseEnter">
            <summary>
                <para>The <see cref="E:DevExpress.Wpf.Editors.ComboBoxEdit.PopupListBoxSelectionChanged"/> event occurs when the mouse pointer enters the boundaries of a list item.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Popups.SelectionEventMode.MouseUp">
            <summary>
                <para>The <see cref="E:DevExpress.Wpf.Editors.ComboBoxEdit.PopupListBoxSelectionChanged"/> event occurs when the mouse button is released.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Validation.InvalidValueBehavior">

            <summary>
                <para>Lists values that specify the response of an editor to an invalid value. 
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.Validation.InvalidValueBehavior.AllowLeaveEditor">
            <summary>
                <para>This mode allows you to switch to another editor, and re-enter a value for this editor later.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Validation.InvalidValueBehavior.WaitForValidValue">
            <summary>
                <para>This mode locks the entire application until a correct value is entered.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.SpinEditSettings">

            <summary>
                <para>Contains settings specific to a spin editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.SpinEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the SpinEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.SpinEditSettings.Increment">
            <summary>
                <para>Gets or sets a value by which the editor's value changes each time the editor is spun.
This is a dependency property.
</para>
            </summary>
            <value>A decimal value representing the increment for the spin editor.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.SpinEditSettings.IncrementProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.SpinEditSettings.IsFloatValue">
            <summary>
                <para>Gets or sets whether the editor's value is a float.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor's value is a float; <b>false</b> if the editor's value is an integer.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.SpinEditSettings.IsFloatValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.SpinEditSettings.MaxValue">
            <summary>
                <para>Gets or sets the editor's maximum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Decimal"/> value that specifies the maximum allowed value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.SpinEditSettings.MaxValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.SpinEditSettings.MinValue">
            <summary>
                <para>Gets or sets the editor's minimum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Decimal"/> value which represents the minimum allowed value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.SpinEditSettings.MinValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.TextEditSettings">

            <summary>
                <para>Contains settings specific to a text editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.TextEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the TextEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.AcceptsReturn">
            <summary>
                <para>Gets or sets whether an end-user can insert return characters into a text. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow return characters to be accepted and processed by the editor; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.AcceptsReturnProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.DisplayTextConverter">
            <summary>
                <para>Gets or sets a converter used to provide the text displayed within the editor. This is a dependency property.
</para>
            </summary>
            <value>An object that implements the <see cref="T:System.Windows.Data.IValueConverter"/> interface.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.DisplayTextConverterProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.TextEditSettings.GetDisplayTextFromEditor(System.Object)">
            <summary>
                <para>Returns the display representation of the specified value.

</para>
            </summary>
            <param name="editValue">
		An object representing the value to be formatted.

            </param>
            <returns>A string value representing the formatted textual representation of the specified value.
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.Mask">
            <summary>
                <para>Gets or sets a mask expression. This is a dependency property.
</para>
            </summary>
            <value>A string representing a mask expression. 
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskAllowNullInput">
            <summary>
                <para>Gets or sets whether end-users can set the editor's value to a null reference.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if end-users can set the editor's value to a null reference; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskAllowNullInputProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskAutoComplete">
            <summary>
                <para>Gets or sets the automatic completion mode used by the editor in the RegEx mask mode. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.AutoCompleteType"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskAutoCompleteProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskBeepOnError">
            <summary>
                <para>Gets or sets whether an editor beeps when an end-user tries to enter an invalid character. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor sounds a beep when an end-user tries to enter an invalid character; otherwise, <b>false</b>. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskBeepOnErrorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskCulture">
            <summary>
                <para>Gets or sets the culture whose settings are used by masks. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Globalization.CultureInfo"/> object whose settings are used by masks. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskCultureProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskIgnoreBlank">
            <summary>
                <para>Gets or sets whether the editor can lose focus when a value hasn't been entered, for the <b>Simple</b>, <b>Regular</b> and <b>RegEx</b> mask types. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor can lose focus when a value has not been entered; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskIgnoreBlankProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskPlaceHolder">
            <summary>
                <para>Gets or sets the character used as the placeholder in a masked editor, for the <b>Simple</b>, <b>Regular</b> and <b>RegEx</b> mask types. This is a dependency property.
</para>
            </summary>
            <value>The character used as the placeholder in a masked editor. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskPlaceHolderProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskSaveLiteral">
            <summary>
                <para>Gets or sets whether constantly displayed mask characters (literals) are included in an editor's value, for the <b>Simple</b> and <b>Regular</b> mask types. This is a dependency property.

</para>
            </summary>
            <value><b>true</b> if the constantly displayed mask characters are included in an editor's value; otherwise, <b>false</b>. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskSaveLiteralProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskShowPlaceHolders">
            <summary>
                <para>Gets or sets whether placeholders are displayed in a masked editor, for the <b>RegEx</b> mask type. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to display placeholders in a masked editor; otherwise <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskShowPlaceHoldersProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskType">
            <summary>
                <para>Gets or sets the mask type. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.MaskType"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskTypeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskUseAsDisplayFormat">
            <summary>
                <para>Gets or sets whether display values are still formatted using the mask when the editor is not focused. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the mask settings are used to format display values when the editor is not focused; <b>false</b> if the settings specified by the <see cref="P:DevExpress.Wpf.Editors.Settings.BaseEditSettings.DisplayFormat"/> property are used.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.MaskUseAsDisplayFormatProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.ShowTooltipForTrimmedText">
            <summary>
                <para>Gets or sets whether to invoke a tooltip for the editor whose content is trimmed.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if a tooltip should be displayed; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.ShowTooltipForTrimmedTextProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.TextTrimming">
            <summary>
                <para>Gets or sets the text trimming behavior.
This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextTrimming"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.TextTrimmingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.TextEditSettings.TextWrapping">
            <summary>
                <para>Gets or sets whether the text wraps when it reaches the edge of the text box. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.TextWrapping"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.TextEditSettings.TextWrappingProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment">

            <summary>
                <para>Lists the values used to specify the horizontal alignment.

</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment.Center">
            <summary>
                <para>An element aligned to the center of the layout slot for the parent element.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment.Default">
            <summary>
                <para>The element alignment is defined by the owner of the editor.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment.Left">
            <summary>
                <para>An element aligned to the left of the layout slot for the parent element.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment.Right">
            <summary>
                <para>An element aligned to the right of the layout slot for the parent element.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.EditSettingsHorizontalAlignment.Stretch">
            <summary>
                <para>An element stretched to fill the entire layout slot of the parent element.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.PopupFooterButtons">

            <summary>
                <para>Lists the values used to specify which buttons should be visible in a pop-up footer.

</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupFooterButtons.Close">
            <summary>
                <para>There is only the <b>Close</b> button in in a pop-up's footer. This buttons acts in the same way as the <b>Cancel</b> button (closes the editor and discards changes).


</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupFooterButtons.None">
            <summary>
                <para>There are no buttons in a pop-up's footer.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupFooterButtons.OkCancel">
            <summary>
                <para>A pop-up's footer displayes two buttons:
<para> The <b>OK</b> button that closes the editor and applies changes to the editor's value;</para>
<para> The <b>Cancel</b> button that also closes the editor and discards all changes.</para>
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.EditMode">

            <summary>
                <para>Lists values that specify the edit mode of an editor.
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.EditMode.InplaceActive">
            <summary>
                <para>The editor is used as an inplace editor and it's active.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.EditMode.InplaceInactive">
            <summary>
                <para>The editor is used as an inplace editor and it's inactive.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.EditMode.Standalone">
            <summary>
                <para>The editor is used as a stand-alone editor.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ComboBoxItemCollection">

            <summary>
                <para>Represents a collection of items within a combo box editor. 
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.Add(System.Object)">
            <summary>
                <para>Adds the specified item to the collection.
</para>
            </summary>
            <param name="item">
		An object to add to the collection.

            </param>
            <returns>A zero-based integer that specifies the new item's position within the collection.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.AddRange(System.Object[])">
            <summary>
                <para>Adds an array of items to the collection.
</para>
            </summary>
            <param name="range">
		An array of items to be added to the collection.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.BeginUpdate">
            <summary>
                <para>Prevents the collection from being updated until the <see cref="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.EndUpdate"/> method is called.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.Contains(System.Object)">
            <summary>
                <para>Determines whether the collection contains the specified item.

</para>
            </summary>
            <param name="item">
		The item to locate in the collection.

            </param>
            <returns><b>true</b> if the collection contains the specified item; otherwise, <b>false</b>.
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.EndUpdate">
            <summary>
                <para>Unlocks the collection after the <see cref="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.BeginUpdate"/> method call and causes an immediate update. 
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.IndexOf(System.Object)">
            <summary>
                <para>Returns the item's position within the collection.
</para>
            </summary>
            <param name="item">
		The item to locate in the collection.

            </param>
            <returns>A zero-based integer representing the specified item's position within the collection. <b>-1</b> if the collection doesn't contain the specified item.

</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.Insert(System.Int32,System.Object)">
            <summary>
                <para>Inserts the specified item into the collection at the specified index.
</para>
            </summary>
            <param name="index">
		A zero-based index location where the specified item should be inserted. If negative or exceeds the number of elements within the collection, an exception is thrown.

            </param>
            <param name="item">
		An object representing the item to insert into the collection.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxItemCollection.Item(System.Int32)">
            <summary>
                <para>Provides indexed access to individual items.
</para>
            </summary>
            <param name="index">
		An integer value specifying the zero-based index of the required collection item. If negative or exceeds the last available index, an exception is raised.

            </param>
            <value>An object representing the item located at the specified index within the collection. 
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxItemCollection.Remove(System.Object)">
            <summary>
                <para>Removes the specified item from the collection.
</para>
            </summary>
            <param name="item">
		An object representing the combobox item to be removed.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.BaseComboBoxStyleSettings">

            <summary>
                <para>Serves as a base for classes that contain settings which define the appearance of the combobox drop-down window.
</para>
            </summary>

        </member>
        <member name="T:DevExpress.Wpf.Editors.AutoCompleteType">

            <summary>
                <para>Lists values that specify the type of automatic completion modes used by an editor.
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.AutoCompleteType.Default">
            <summary>
                <para>When set to <b>Default</b>, the <see cref="F:DevExpress.Wpf.Editors.AutoCompleteType.Strong"/> automatic completion mode is used.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.AutoCompleteType.None">
            <summary>
                <para>The automatic completion feature is disabled.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.AutoCompleteType.Optimistic">
            <summary>
                <para>When an end-user enters a character in an empty edit box for the first time, the editor automatically fills all the following placeholders with the default values. For placeholders that accept only numeric values, the '0' character is the default. For placeholders that accept word characters, the "a" character is the default.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.AutoCompleteType.Strong">
            <summary>
                <para>Each time an end-user types a character, the editor determines if the following placeholder can be filled automatically. If only a specific character can be inserted in this position, the editor automatically displays this character, and moves the caret to the right of this character.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.PopupCloseMode">

            <summary>
                <para>Contains values specifying how a drop-down editor's popup window was closed. 
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupCloseMode.ButtonClick">
            <summary>
                <para>Specifies that the drop-down window was closed because an end-user clicked the editor's drop-down button.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupCloseMode.Cancel">
            <summary>
                <para>Specifies that the drop-down window was closed because an end-user pressed the ESC key or clicked the close button.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupCloseMode.CloseUpKey">
            <summary>
                <para>Specifies that the drop-down window was closed because an end-user pressed a shortcut used to close the drop-down (the ALT+DOWN ARROW). 
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupCloseMode.Immediate">
            <summary>
                <para>Specifies that the drop-down window was closed because an end-user clicked outside the editor. 
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupCloseMode.Normal">
            <summary>
                <para>Specifies that the drop-down window was closed because an end-user selected an option from the editor's drop-down. 

</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.PopupBaseEdit">

            <summary>
                <para>Serves as a base for classes that represent popup editors (e.g. <see cref="T:DevExpress.Wpf.Editors.DateEdit"/>, <see cref="T:DevExpress.Wpf.Editors.ComboBoxEdit"/>).
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.PopupBaseEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the PopupBaseEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupHeight">
            <summary>
                <para>Gets a popup window's actual height. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's actual height.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupMinWidth">
            <summary>
                <para>Gets the popup window's actual minimum width. This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's actual minimum width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupMinWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupWidth">
            <summary>
                <para>Gets a popup window's actual width. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the popup window's actual width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.ActualPopupWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.PopupBaseEdit.CancelPopup">
            <summary>
                <para>Closes the editor's popup window, discarding all the changes made.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.PopupBaseEdit.ClosePopup">
            <summary>
                <para>Closes the popup window, accepting the changes made.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.ClosePopupCommand">
            <summary>
                <para>Closes the editor's popup window.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.DropOpposite">
            <summary>
                <para>This property is intended for internal use only. Normally, you won't need to use it.
</para>
            </summary>
            <value> 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.DropOppositeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.PopupBaseEdit.GetPopupOwnerEdit(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the value of the <see cref="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOwnerEdit"/> attached property for a specified dependency element.
</para>
            </summary>
            <param name="element">
		The element from which the property value is read.

            </param>
            <returns>A <see cref="T:DevExpress.Wpf.Editors.PopupBaseEdit"/> descendant that represents the owner editor for the element.
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.IsPopupOpen">
            <summary>
                <para>Gets or sets whether the editor's dropdown (popup window) is opened.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor's dropdown is opened; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.IsPopupOpenProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosed">
            <summary>
                <para>Occurs after the editor's dropdown (popup window) has been closed.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosing">
            <summary>
                <para>Occurs before the editor's dropdown (popup window) is closed.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosingEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupContentContainerTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of the popup window's content container. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object that represents the element's template.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupContentContainerTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.



</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupContentTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of the popup window's content. This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object that represents the template of the popup window's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupFooterButtons">
            <summary>
                <para>Gets or sets which buttons are displayed within the editor's dropdown. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.PopupFooterButtons"/> enumeration value that specifies which buttons are displayed within the editor's dropdown.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupFooterButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupHeight">
            <summary>
                <para>Gets or sets the dropdown's height.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's height.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMaxHeight">
            <summary>
                <para>Gets or sets the dropdown's maximum height. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's maximum height.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMaxHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMaxWidth">
            <summary>
                <para>Gets or sets the dropdown's maximum width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's maximum width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMaxWidthProperty">
            <summary>
                <para>Identifies the  dependency property.



</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMinHeight">
            <summary>
                <para>Gets or sets the dropdown's minimum height. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's minimum height.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMinHeightProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMinWidth">
            <summary>
                <para>Gets or sets the dropdown's minimum width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's minimum width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupMinWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOpened">
            <summary>
                <para>Occurs after the editor's dropdown (popup window) has been shown.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOpenedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOpening">
            <summary>
                <para>Occurs before the editor's dropdown (popup window) is opened.


</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOpeningEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOwnerEdit(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the owner editor. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.PopupBaseEdit"/> class descendant that represents the owner editor for the element.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupOwnerEditProperty">
            <summary>
                <para>Identifies the  attached property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of an editor's popup window. This is a dependency property.

</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object that represents a popup window's template.
 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.PopupWidth">
            <summary>
                <para>Gets or sets the dropdown's width.
</para>
            </summary>
            <value>A <see cref="T:System.Double"/> value that specifies the dropdown's width.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.PopupWidthProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.PopupBaseEdit.ShowPopup">
            <summary>
                <para>Invokes the editor's popup window.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.PopupBaseEdit.ShowSizeGrip">
            <summary>
                <para>Gets or sets whether to show the size grip within the editor's drop-down.
</para>
            </summary>
            <value>A <see cref="T:System.Boolean"/> value that specifies whether to show the size grip within the editor's drop-down.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.PopupBaseEdit.ShowSizeGripProperty">
            <summary>
                <para>Identifies the  dependency property.



</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.DateEdit">

            <summary>
                <para>Represents a date editor with a dropdown calendar.

</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.DateEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the DateEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.DateTime">
            <summary>
                <para>Gets or sets the editor's date/time value. This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.DateTime"/> object that specifies the editor's value.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.DateTimeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.MaxValue">
            <summary>
                <para>Gets or sets the editor's maximum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.DateTime"/> value that specifies the maximum allowed date.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.MaxValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.MinValue">
            <summary>
                <para>Gets or sets the editor's minimum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure which represents the minimum allowed date.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.MinValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.NullValue">
            <summary>
                <para>Gets or sets the null date.
</para>
            </summary>
            <value>An <b>object</b> representing the null date. The default is <b>null</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.NullValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.PopupFooterButtons">
            <summary>
                <para>This property is not in effect for this class. It's overridden only for the purpose of preventing it from appearing in Microsoft Visual Studio designer tools. 
</para>
            </summary>
            <value> 
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.ShowClearButton">
            <summary>
                <para>Gets or sets whether the dropdown calendar displays the <b>Clear</b> button. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the dropdown calendar displays the <b>Clear</b> button; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.ShowClearButtonProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.ShowSizeGrip">
            <summary>
                <para>Gets or sets whether to show the size grip within the drop-down calendar.
</para>
            </summary>
            <value>A <see cref="T:System.Boolean"/> value that specifies whether to show the size grip within the drop-down calendar.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.ShowToday">
            <summary>
                <para>Gets or sets whether to display <b>Today</b> on the dropdown calendar. This is a dependency property.

</para>
            </summary>
            <value><b>true</b> to display <b>Today</b>; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.ShowTodayProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.DateEdit.ShowWeekNumbers">
            <summary>
                <para>Gets or sets whether to display week numbers in the dropdown calendar. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the dropdown calendar displays week numbers; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.DateEdit.ShowWeekNumbersProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ComboBoxEdit">

            <summary>
                <para>Represents an editor that displays a list of items within a dropdown window.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the ComboBoxEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ApplyItemTemplateToSelectedItem">
            <summary>
                <para>Gets or sets whether to apply the <see cref="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemTemplate"/> to the selected item, dipslayed within a text box. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to apply the item template to the selected item; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ApplyItemTemplateToSelectedItemProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.DisplayMember">
            <summary>
                <para>Gets or sets a field name in the bound data source whose contents are to be displayed by the combo box editor. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the field name in a bound data source.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.DisplayMemberProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemContainerStyle">
            <summary>
                <para>Gets or sets the style applied to a list item container. This is a dependency property.

</para>
            </summary>
            <value>A <see cref="T:System.Windows.Style"/> object that contains style settings.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ItemContainerStyleProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.Items">
            <summary>
                <para>Provides access to the collection of items when the editor is not bound to a data source. 
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.ComboBoxItemCollection"/> object that represents the collection of items.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemsPanel">
            <summary>
                <para>Gets or sets the template that defines the presentation of a container panel used by the editor to arrange its items. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ItemsPanelTemplate"/> object that arranges items.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ItemsPanelProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemsSource">
            <summary>
                <para>Gets or sets the data source.
</para>
            </summary>
            <value>A data source object that implements the <see cref="T:System.Collections.IEnumerable"/> interface.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ItemsSourceProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemTemplate">
            <summary>
                <para>Gets or sets a template that defines the presentation of items contained within the dropdown list. This is a dependency property.

</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the template which defines the presentation of items contained within the dropdown list.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ItemTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ItemTemplateSelector">
            <summary>
                <para>Gets or sets an object that chooses a list item template based on custom logic.
This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.DataTemplateSelector"/> descendant that applies a template based on custom logic.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ItemTemplateSelectorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.ComboBoxEdit.PopupListBoxSelectionChanged">
            <summary>
                <para>Occurs when an item selection (highlighting) is moved to another item within the editor's dropdown.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.PopupListBoxSelectionChangedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedIndex">
            <summary>
                <para>Gets or sets the index of the selected item. This is a dependency property.
</para>
            </summary>
            <value>An integer value that specifies the index of the selected item. <b>-1</b> if there is no selected item.
</value>


        </member>
        <member name="E:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedIndexChanged">
            <summary>
                <para>Occurs when changing the index of the selected value in the combo box editor.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedIndexChangedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedIndexProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedItem">
            <summary>
                <para>Gets or sets the currently selected item. This is a dependency property.
</para>
            </summary>
            <value>An object representing the currently selected item.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedItemProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedItems">
            <summary>
                <para>Gets the list of selected items. This is a dependency property.

</para>
            </summary>
            <value>The list that contains selected items.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.SelectedItemsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.Separator">
            <summary>
                <para>Gets or sets a string that separates selected items displayed within the edit box (multi-selection mode).
</para>
            </summary>
            <value>A <see cref="T:System.String"/> that separates selected items displayed within the edit box.
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxEdit.SetupComboBoxEnumItemSource``2(DevExpress.Wpf.Editors.ComboBoxEdit)">
            <summary>
                <para>Binds the enumeration to the specified combobox editor.

</para>
            </summary>
            <param name="comboBox">
		A ComboBoxEdit object that represents the combobox editor.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxEdit.SetupComboBoxSettingsEnumItemSource``1(DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings)">
            <summary>
                <para>Binds the enumeration to the specified <see cref="T:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings"/> object.
</para>
            </summary>
            <param name="settings">
		A <see cref="T:DevExpress.Wpf.Editors.Settings.ComboBoxEditSettings"/> object that contains settings used to create a combobox.


            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.StyleSettings">
            <summary>
                <para>Gets or sets an object that defines the appearance of the editor's dropdown list. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.BaseComboBoxStyleSettings"/> descendant that defines the appearance of the editor's dropdown list.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.StyleSettingsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ComboBoxEdit.ValueMember">
            <summary>
                <para>Gets or sets a field name in the bound data source whose contents are assigned to item values. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.String"/> value that specifies the field name in a bound data source.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ComboBoxEdit.ValueMemberProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.CheckEdit">

            <summary>
                <para>Represents the check box editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.CheckEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the CheckEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="E:DevExpress.Wpf.Editors.CheckEdit.Checked">
            <summary>
                <para>Occurs when a check editor is checked.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.CheckedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.ClickMode">
            <summary>
                <para>Gets or sets a value that specifies when the editor's state changes in response to end-user manipulations. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.Controls.ClickMode"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.ClickModeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.Content">
            <summary>
                <para>Gets or sets the editor's content. This is a dependency property. 
</para>
            </summary>
            <value>An object that represents the editor's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.ContentProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.ContentTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of the editor's content represented by the <see cref="P:DevExpress.Wpf.Editors.CheckEdit.Content"/> property. This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the editor's content template.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.ContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.ContentTemplateSelector">
            <summary>
                <para>Gets or sets an object that chooses the editor's content template based on custom logic.
This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.DataTemplateSelector"/> descendant that applies a template based on custom logic.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.ContentTemplateSelectorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.CheckEdit.Indeterminate">
            <summary>
                <para>Occurs when a check editor is set to the indeterminate state.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.IndeterminateEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.IsChecked">
            <summary>
                <para>Gets or sets whether an editor is checked. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Boolean"/> value (that can also have a value of <b>null</b>) that specifies the editor's state.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.IsCheckedProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CheckEdit.IsThreeState">
            <summary>
                <para>Gets or sets whether the check editor supports three states (checked, unchecked and indeterminate).
</para>
            </summary>
            <value><b>true</b> if the editor supports three states; <b>false</b> if the editor supports two states (checked and unchecked).
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.IsThreeStateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.CheckEdit.Unchecked">
            <summary>
                <para>Occurs when a check editor is unchecked.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.CheckEdit.UncheckedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ButtonEdit">

            <summary>
                <para>Represents a text editor with embedded buttons.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ButtonEdit.#ctor">
            <summary>
                <para>Initializes a new instance of the ButtonEdit class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.AllowDefaultButton">
            <summary>
                <para>Gets or sets whether the editor's default button is displayed. This is a dependency property. 
</para>
            </summary>
            <value><b>true</b> to display the editor's default button; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.AllowDefaultButtonProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.Buttons">
            <summary>
                <para>Returns the collection of buttons.
</para>
            </summary>
            <value>The collection of <see cref="T:DevExpress.Wpf.Editors.ButtonInfoBase"/> descendants that represent the editor's buttons.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.ButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.ButtonEdit.DefaultButtonClick">
            <summary>
                <para>Occurs when an editor's default button is clicked.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.DefaultButtonClickEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.IsTextEditable">
            <summary>
                <para>Gets or sets whether an end-user is allowed to edit the text displayed within the edit box. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to allow an end-user to edit the text displayed within the edit box; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.IsTextEditableProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.LeftButtons">
            <summary>
                <para>Gets a collection of buttons aligned to the editor's left edge.
</para>
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection"/> object that represents the collection of left-aligned buttons.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.LeftButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ButtonEdit.OnApplyTemplate">
            <summary>
                <para>Called when a template is applied to the editor.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.RightButtons">
            <summary>
                <para>Gets a collection of buttons aligned to the editor's right edge.
</para>
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection"/> object that represents the collection of right-aligned buttons.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.RightButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonEdit.ShowEditorButtons">
            <summary>
                <para>Gets or sets whether to display editor buttons, including the default button.
</para>
            </summary>
            <value><b>true</b> to display editor buttons; otheriwse, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonEdit.ShowEditorButtonsProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.BaseEdit">

            <summary>
                <para>Serves as the base for all editors that can be used for inplace editing in container controls (e.g. within the DXGrid).
</para>
            </summary>

        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ActualEditorControlTemplate">
            <summary>
                <para>Gets the editor's actual template. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object that represents the editor's template.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ActualEditorControlTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.BeginInit">
            <summary>
                <para>Starts the BaseEdit's initialization. Initialization occurs at runtime.

</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.BorderTemplate">
            <summary>
                <para>Gets or sets a template used to display the editor's border. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object representing the template that defines the appearance of the editor's border.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.BorderTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.CausesValidation">
            <summary>
                <para>Gets or sets a value indicating whether validation is enabled for this editor.
This is a dependency property.
</para>
            </summary>
            <value> <b>true</b> if the validation is enabled; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.CausesValidationProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.CausesValidation"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.ClearError">
            <summary>
                <para> [To be supplied] </para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.DisplayTemplate">
            <summary>
                <para>Gets or sets a template that defines the editor's presentation when its value is not edited (display mode). This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object representing the editor's template.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.DisplayTemplateProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.DisplayTemplate"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.DoValidate">
            <summary>
                <para>Validates the editor.
</para>
            </summary>
            <returns><b>true</b> if the editor's value has been validated; <b>false</b> if the editor's value is invalid.
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.EditMode">
            <summary>
                <para>Gets or sets a value that indicates in which mode the editor is currently used. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.EditMode"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditModeProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.EditMode"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.BaseEdit.EditorActivated">
            <summary>
                <para>Occurs after an editor has been activated.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditorActivatedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.EditTemplate">
            <summary>
                <para>Gets or sets a template that defines the editor's presentation in edit mode. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.ControlTemplate"/> object representing the editor's template.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditTemplateProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Grid.GridColumn.EditTemplate"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.EditValue">
            <summary>
                <para>Gets or sets the editor's value. This is a dependency property.
</para>
            </summary>
            <value>An object that represents the editor's value.
</value>


        </member>
        <member name="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanged">
            <summary>
                <para>Occurs after the editor's value has been changed.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditValueChangedEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanging">
            <summary>
                <para>Occurs before the editor's value is changed.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditValueChangingEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.EditValueProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.EditValue"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.EndInit">
            <summary>
                <para>Ends the BaseEdit's initialization.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ErrorToolTipContentTemplate">
            <summary>
                <para>Gets or sets a template that presents the content of an editor's error tooltip. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the data template.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ErrorToolTipContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.GetHasValidationError(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the value of the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.HasValidationError"/> attached property for a specified <see cref="T:System.Windows.DependencyObject"/>.
</para>
            </summary>
            <param name="element">
		The element from which the property value is read.

            </param>
            <returns>The <see cref="P:DevExpress.Wpf.Editors.BaseEdit.HasValidationError"/> property value for the element. 
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.GetOwnerEdit(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the value of the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.OwnerEdit"/> attached property for a specified <see cref="T:System.Windows.DependencyObject"/>.
</para>
            </summary>
            <param name="element">
		The element from which the property value is read.

            </param>
            <returns>The <see cref="P:DevExpress.Wpf.Editors.BaseEdit.OwnerEdit"/> property value for the element. 
</returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.GetValidationError(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the value of the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.ValidationError"/> attached property for a specified <see cref="T:System.Windows.DependencyObject"/>.
</para>
            </summary>
            <param name="element">
		The element from which the property value is read.

            </param>
            <returns>The <see cref="P:DevExpress.Wpf.Editors.BaseEdit.ValidationError"/> property value for the element. 
</returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.HasValidationError">
            <summary>
                <para>Gets whether an editor has a validation error. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the editor has a validation error; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.HasValidationErrorProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Grid.GridViewBase.HasValidationError"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.InvalidValueBehavior">
            <summary>
                <para>Gets or sets a value that specifies the editor's response to an invalid value. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.Validation.InvalidValueBehavior"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.InvalidValueBehaviorProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.InvalidValueBehavior"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.IsEditorActive">
            <summary>
                <para>Gets whether the editor is active.
</para>
            </summary>
            <value><b>true</b> if the editor is active; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.IsEditorActiveProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.IsPrintingMode">
            <summary>
                <para>This member supports the internal infrastructure and is not intended to be used directly from your code.
</para>
            </summary>
            <value>@nbsp;
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.IsPrintingModeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.IsReadOnly">
            <summary>
                <para>Gets or sets whether the editor's value can be changed by end-users. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if an end-user cannot modify the editor's value; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.IsReadOnlyProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.IsReadOnly"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.OnApplyTemplate">
            <summary>
                <para>Called when a template is applied to the editor.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.OwnerEdit(System.Windows.DependencyObject)">
            <summary>
                <para>Gets the editor's owner.

</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.BaseEdit"/> descendant that owns the current editor.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.OwnerEditProperty">
            <summary>
                <para>Identifies the  attached property.

</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.RaiseOnLoading">
            <summary>
                <para>This member supports the internal infrastructure and is not intended to be used directly from your code.
</para>
            </summary>
            <value>@nbsp;
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.BaseEdit.SelectAll">
            <summary>
                <para>Selects the editor's entire content.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ShowBorder">
            <summary>
                <para>Gets or sets whether the editor's border is displayed. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to display the border; otherwise, <b>false</b>.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ShowBorderProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.ShowBorder"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.TrimmedTextToolTipContentTemplate">
            <summary>
                <para>Gets or sets the data template used to display the content of a tooltip invoked for the editor whose text is trimmed.
This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object representing the template that defines the tooltip's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.TrimmedTextToolTipContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="E:DevExpress.Wpf.Editors.BaseEdit.Validate">
            <summary>
                <para>Enables you to validate the editor's value.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ValidateEvent">
            <summary>
                <para>Identifies the  routed event.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ValidateOnEnterKeyPressed">
            <summary>
                <para>Gets or sets whether the edit value should be validated when pressing the ENTER key. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to validate the edit value after the ENTER key has been pressed; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ValidateOnEnterKeyPressedProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.ValidateOnEnterKeyPressed"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ValidateOnTextInput">
            <summary>
                <para>Gets or sets whether the edit value should be validated while typing within the editor's text box. This is a dependency property.

</para>
            </summary>
            <value><b>true</b> to validate the edit value while an end-user types text within the editor's text box; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ValidateOnTextInputProperty">
            <summary>
                <para>Identifies the <see cref="P:DevExpress.Wpf.Editors.BaseEdit.ValidateOnTextInput"/> dependency property.
</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.BaseEdit.ValidationError">
            <summary>
                <para>Gets the validation error defined for the editor. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.Validation.BaseValidationError"/> object containing validation error settings.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.BaseEdit.ValidationErrorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.SpinEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.TextEdit.Spin"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.SpinEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.SpinEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.TextEdit.Spin"/> event.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		A <see cref="T:DevExpress.Wpf.Editors.SpinEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.CheckedComboBoxStyleSettings">

            <summary>
                <para>Defines the check box list appearance for a combo box editor's dropdown window.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.CheckedComboBoxStyleSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the CheckedComboBoxStyleSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ClosePopupEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosing"/> and <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosed"/> events.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ClosePopupEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.ClosePopupEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosing"/> and <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosed"/> events.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		A <see cref="T:DevExpress.Wpf.Editors.ClosePopupEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ClosePopupEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosing"/> and <see cref="E:DevExpress.Wpf.Editors.PopupBaseEdit.PopupClosed"/> events.

</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ClosePopupEventArgs.#ctor(System.Windows.RoutedEvent,DevExpress.Wpf.Editors.PopupCloseMode,System.Object)">
            <summary>
                <para>Initializes a new instance of the ClosePopupEventArgs class with the specified routed event, mode and value.

</para>
            </summary>
            <param name="closeEvent">
		The routed event.

            </param>
            <param name="mode">
		A <see cref="T:DevExpress.Wpf.Editors.PopupCloseMode"/> enumeration value specifying the close mode. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.ClosePopupEventArgs.CloseMode"/> property.

            </param>
            <param name="value">
		A <see cref="T:System.Object"/> specifying the edit value. This object is assigned to the <see cref="P:DevExpress.Wpf.Editors.ClosePopupEventArgs.EditValue"/> property.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ClosePopupEventArgs.CloseMode">
            <summary>
                <para>Gets a value indicating how the popup editor's dropdown window has been closed.
</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.Wpf.Editors.PopupCloseMode"/> enumeration values.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ClosePopupEventArgs.EditValue">
            <summary>
                <para>Gets or sets the editor's value.
</para>
            </summary>
            <value>The value to assign to the editor's <see cref="P:DevExpress.Wpf.Editors.BaseEdit.EditValue"/> property.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.CustomDisplayTextEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.TextEdit.CustomDisplayText"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.CustomDisplayTextEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.CustomDisplayTextEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.TextEdit.CustomDisplayText"/> event.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		A <see cref="T:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.TextEdit.CustomDisplayText"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs.#ctor">
            <summary>
                <para>Initializes a new instance of the CustomDisplayTextEventArgs class with default settings.
</para>
            </summary>


        </member>
        <member name="M:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs.#ctor(System.Windows.RoutedEvent)">
            <summary>
                <para>Initializes a new instance of the CustomDisplayTextEventArgs class with the specified routed event.
</para>
            </summary>
            <param name="routedEvent">
		The routed event.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
            <summary>
                <para>Initializes a new instance of the CustomDisplayTextEventArgs class with the specified routed event and source.
</para>
            </summary>
            <param name="routedEvent">
		The routed event.

            </param>
            <param name="source">
		An object that raised the event.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs.DisplayText">
            <summary>
                <para>Gets or sets the text displayed within the editor.
</para>
            </summary>
            <value>A string value that specifies the editor's display text.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.CustomDisplayTextEventArgs.EditValue">
            <summary>
                <para>Gets or sets the editor's value.
</para>
            </summary>
            <value>An object that represents the editor's current value.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.EditValueChangedEventHandler">

            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanged"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.EditValueChangedEventHandler.Invoke(System.Object,DevExpress.Wpf.Editors.EditValueChangedEventArgs)">
            <summary>
                <para>Represents a method that will handle the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanged"/> event.
</para>
            </summary>
            <param name="sender">
		The event source.

            </param>
            <param name="e">
		An <see cref="T:DevExpress.Wpf.Editors.EditValueChangedEventArgs"/> object that contains event data.

            </param>


        </member>
        <member name="T:DevExpress.Wpf.Editors.EditValueChangedEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.EditValueChanged"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.EditValueChangedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
                <para>Initializes a new instance of the EditValueChangedEventArgs class with the specified old and new edit values.
</para>
            </summary>
            <param name="oldValue">
		An object representing the old edit value. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.EditValueChangedEventArgs.OldValue"/> property.


            </param>
            <param name="newValue">
		An object representing the new edit value. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.EditValueChangedEventArgs.NewValue"/> property.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.EditValueChangedEventArgs.NewValue">
            <summary>
                <para>Gets or sets a new value that has been assigned to the editor.
</para>
            </summary>
            <value>A <see cref="T:System.Object"/> representing the new value.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.EditValueChangedEventArgs.OldValue">
            <summary>
                <para>Gets or sets the previous edit value, which has been replaced by the new value.
</para>
            </summary>
            <value>A <see cref="T:System.Object"/> representing the old value.
</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ValidationEventArgs">

            <summary>
                <para>Provides data for the <see cref="E:DevExpress.Wpf.Editors.BaseEdit.Validate"/> event.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ValidationEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
                <para>Initializes a new instance of the ValidationEventArgs class with the specified routed event, source, value and current culture.



</para>
            </summary>
            <param name="routedEvent">
		The routed event.

            </param>
            <param name="source">
		An object that raised the event.

            </param>
            <param name="value">
		A <see cref="T:System.Object"/> specifying the entered value. This object is assigned to the <see cref="P:DevExpress.Wpf.Editors.ValidationEventArgs.Value"/> property.

            </param>
            <param name="culture">
		A <see cref="T:System.Globalization.CultureInfo"/> object specifying the current culture. This object is assigned to the <see cref="P:DevExpress.Wpf.Editors.ValidationEventArgs.Culture"/> property.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ValidationEventArgs.Culture">
            <summary>
                <para>Gets the culture related to the validation.
</para>
            </summary>
            <value>A <see cref="T:System.Globalization.CultureInfo"/> object representing the related culture.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ValidationEventArgs.ErrorContent">
            <summary>
                <para>Gets or sets an object that describes the validation error.
</para>
            </summary>
            <value>An object that represents the validation error's content.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ValidationEventArgs.ErrorType">
            <summary>
                <para>Gets or sets the error type.

</para>
            </summary>
            <value>One of the <see cref="T:DevExpress.XtraEditors.DXErrorProvider.ErrorType"/> enumeration values.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ValidationEventArgs.IsValid">
            <summary>
                <para>Gets or sets a value specifying whether the value is valid.


</para>
            </summary>
            <value><b>true</b> if the value is valid; otherwise, <b>false</b>.
</value>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ValidationEventArgs.SetError(System.Object,DevExpress.XtraEditors.DXErrorProvider.ErrorType)">
            <summary>
                <para>Displays an error within the editor.

</para>
            </summary>
            <param name="errorContent">
		An object that specifies the error content.


            </param>
            <param name="errorType">
		One of the <see cref="T:DevExpress.XtraEditors.DXErrorProvider.ErrorType"/> enumeration values.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.ValidationEventArgs.SetError(System.Object)">
            <summary>
                <para>Displays an error within the editor.
</para>
            </summary>
            <param name="errorContent">
		An object that specifies the error content.

            </param>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ValidationEventArgs.Value">
            <summary>
                <para>Gets the editor's value.
</para>
            </summary>
            <value>An object that represents the editor's value entered by an end-user.

</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ButtonKind">

            <summary>
                <para>Lists values that specify which image is displayed within edit buttons. 
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonKind.Custom">
            <summary>
                <para>The button uses a custom template, and displays custom content specified by the <b>Content</b> property.

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonKind.DropDown">
            <summary>
                <para>A down arrow is drawn on the button's surface. 

</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonKind.None">
            <summary>
                <para>No specific symbol is drawn on the button's surface.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonKind.Regular">
            <summary>
                <para>An ellipsis symbol is drawn on the button's surface. 
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonKind.User">
            <summary>
                <para>The button uses the common template and displays custom content specified by the <b>Content</b> property.

</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ButtonInfo">

            <summary>
                <para>Represents a button for a button editor.

</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ButtonInfo.#ctor">
            <summary>
                <para>Initializes a new instance of the ButtonInfo class with default settings.
</para>
            </summary>


        </member>
        <member name="E:DevExpress.Wpf.Editors.ButtonInfo.Click">
            <summary>
                <para>Occurs when a button is clicked.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.Command">
            <summary>
                <para>Gets or sets a command associated with the button.
This is a dependency property. 
</para>
            </summary>
            <value>An object implementing the <see cref="T:System.Windows.Input.ICommand"/> interface that represents a command associated with the button. 
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.CommandParameter">
            <summary>
                <para>Gets or sets a parameter to pass to the <see cref="P:DevExpress.Wpf.Editors.ButtonInfo.Command"/> property.
This is a dependency property. 
</para>
            </summary>
            <value>An object that represents the parameter to pass to the command.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.CommandParameterProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.CommandProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.CommandTarget">
            <summary>
                <para>Gets or sets the element on which to execute the associated command.
This is a dependency property. 
</para>
            </summary>
            <value>An object implementing the <see cref="T:System.Windows.IInputElement"/> interface that represents the element on which to execute a command.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.CommandTargetProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.Content">
            <summary>
                <para>Gets or sets the button's content. This is a dependency property. 
</para>
            </summary>
            <value>An object that represents the button's content. 

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.ContentProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.ContentTemplate">
            <summary>
                <para>Gets or sets the data template used to present the button's content. This is a dependency property. 

</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the template used to present the button's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.ContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfo.GlyphKind">
            <summary>
                <para>Gets or sets the type of the button's image. This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:DevExpress.Wpf.Editors.ButtonKind"/> enumeration value that specifies the image type.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfo.GlyphKindProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ButtonInfoBase">

            <summary>
                <para>Serves as a base for classes that represent edit buttons.

</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ButtonInfoBase.#ctor">
            <summary>
                <para>Initializes a new instance of the ButtonInfoBase class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfoBase.ClickMode">
            <summary>
                <para>Gets or sets when the <see cref="E:DevExpress.Wpf.Editors.ButtonInfo.Click"/> event occurs. This is a dependency property.
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.Controls.ClickMode"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfoBase.ClickModeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfoBase.IsDefaultButton">
            <summary>
                <para>Gets whether the button is the default button. This is a dependency property. 
</para>
            </summary>
            <value><b>true</b> if the button is the default button; otherwise, <b>false</b>. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfoBase.IsDefaultButtonProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfoBase.IsLeft">
            <summary>
                <para>Gets or sets the button's alignment within a <see cref="T:DevExpress.Wpf.Editors.ButtonEdit"/> control. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> to align the button to the editor's left edge; <b>false</b> to align the button to the editor's right edge. 
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfoBase.IsLeftProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.ButtonInfoBase.Template">
            <summary>
                <para>Gets or sets a button's template. This is a dependency property. 
</para>
            </summary>
            <value>The template that defines the button's presentation and appearance.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.ButtonInfoBase.TemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Validation.ValidationMode">

            <summary>
                <para>Lists values that specify when validation occurs.
</para>
            </summary>

        </member>
        <member name="F:DevExpress.Wpf.Editors.Validation.ValidationMode.EnterKeyPressed">
            <summary>
                <para>Validation is performed when the Enter key is pressed when an editor has focus.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Validation.ValidationMode.LostFocus">
            <summary>
                <para>Validation is performed when an editor loses focus.
</para>
            </summary>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Validation.ValidationMode.TextInput">
            <summary>
                <para>Validation is performed when inputting text into an editor's edit box.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.ComboBoxEditItem">

            <summary>
                <para>Represents an individual list item.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.ComboBoxEditItem.#ctor">
            <summary>
                <para>Initializes a new instance of the ComboBoxEditItem class with default settings.
</para>
            </summary>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Validation.BaseValidationError">

            <summary>
                <para>Contains settings that define a validation error.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Validation.BaseValidationError.#ctor(System.Object,System.Exception,DevExpress.XtraEditors.DXErrorProvider.ErrorType)">
            <summary>
                <para>Initializes a new instance of the BaseValidationError class with the specified error content, exception and error type.

</para>
            </summary>
            <param name="errorContent">
		A <see cref="T:System.Object"/> specifying the error content. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorContent"/> property.


            </param>
            <param name="exception">
		A <see cref="T:System.Exception"/> object, containing information about the error. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.Exception"/> property.

            </param>
            <param name="errorType">
		A <see cref="T:DevExpress.XtraEditors.DXErrorProvider.ErrorType"/> enumeration value specifying the error type. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorType"/> property.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Validation.BaseValidationError.#ctor(System.Object,System.Exception)">
            <summary>
                <para>Initializes a new instance of the BaseValidationError class with the specified error content and exception.

</para>
            </summary>
            <param name="errorContent">
		A <see cref="T:System.Object"/> specifying the error content. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorContent"/> property.


            </param>
            <param name="exception">
		A <see cref="T:System.Exception"/> object, containing information about the error. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.Exception"/> property.

            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Validation.BaseValidationError.#ctor(System.Object)">
            <summary>
                <para>Initializes a new instance of the BaseValidationError class with the specified error content.


</para>
            </summary>
            <param name="errorContent">
		A <see cref="T:System.Object"/> specifying the error content. This value is assigned to the <see cref="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorContent"/> property.


            </param>


        </member>
        <member name="M:DevExpress.Wpf.Editors.Validation.BaseValidationError.#ctor">
            <summary>
                <para>Initializes a new instance of the BaseValidationError class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorContent">
            <summary>
                <para>Gets the error description.
</para>
            </summary>
            <value>An object that specifies the error content.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.ErrorType">
            <summary>
                <para>Gets the error type.
</para>
            </summary>
            <value>A <see cref="T:DevExpress.XtraEditors.DXErrorProvider.ErrorType"/> enumeration value that specifies the error type.
</value>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Validation.BaseValidationError.Exception">
            <summary>
                <para>Gets the exception.
</para>
            </summary>
            <value>A <see cref="T:System.Exception"/> object that contains information about the error.

</value>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.DateEditSettings">

            <summary>
                <para>Contains settings specific to a date editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.DateEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the DateEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.DateEditSettings.MaxValue">
            <summary>
                <para>Gets or sets the editor's maximum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.DateTime"/> value that specifies the maximum allowed date.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.DateEditSettings.MaxValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.DateEditSettings.MinValue">
            <summary>
                <para>Gets or sets the editor's minimum value. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure which represents the minimum allowed date.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.DateEditSettings.MinValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.DateEditSettings.NullValue">
            <summary>
                <para>Gets or sets a value representing the <b>null</b> date.
</para>
            </summary>
            <value>A value representing the <b>null</b> date.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.DateEditSettings.NullValueProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.DateEditSettings.ShowWeekNumbers">
            <summary>
                <para>Gets or sets whether to display week numbers in the drop-down window.
This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the drop-down window displays week numbers; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.DateEditSettings.ShowWeekNumbersProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="T:DevExpress.Wpf.Editors.Settings.CheckEditSettings">

            <summary>
                <para>Contains settings specific to a check editor.
</para>
            </summary>

        </member>
        <member name="M:DevExpress.Wpf.Editors.Settings.CheckEditSettings.#ctor">
            <summary>
                <para>Initializes a new instance of the CheckEditSettings class with default settings.
</para>
            </summary>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ClickMode">
            <summary>
                <para>Gets or sets a value that specifies when the editor's state changes. This is a dependency property. 
</para>
            </summary>
            <value>One of the <see cref="T:System.Windows.Controls.ClickMode"/> enumeration values.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ClickModeProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.Content">
            <summary>
                <para>Gets or sets the editor's content. This is a dependency property.
</para>
            </summary>
            <value>An object that specifies the editor's content.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ContentProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ContentTemplate">
            <summary>
                <para>Gets or sets the template that defines the presentation of the editor's content, represented by the <see cref="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.Content"/> property. This is a dependency property.
</para>
            </summary>
            <value>A <see cref="T:System.Windows.DataTemplate"/> object that represents the template which defines the presentation of the editor's content.

</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ContentTemplateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ContentTemplateSelector">
            <summary>
                <para>Gets or sets an object that chooses the editor's content template based on custom logic.
This is a dependency property. 
</para>
            </summary>
            <value>A <see cref="T:System.Windows.Controls.DataTemplateSelector"/> descendant that applies a template based on custom logic.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.CheckEditSettings.ContentTemplateSelectorProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
        <member name="P:DevExpress.Wpf.Editors.Settings.CheckEditSettings.IsThreeState">
            <summary>
                <para>Gets or sets whether the check editor supports three check states. This is a dependency property.
</para>
            </summary>
            <value><b>true</b> if the check editor supports three check states; otherwise, <b>false</b>.
</value>


        </member>
        <member name="F:DevExpress.Wpf.Editors.Settings.CheckEditSettings.IsThreeStateProperty">
            <summary>
                <para>Identifies the  dependency property.


</para>
            </summary>
            <returns> [To be supplied] </returns>


        </member>
    </members>
</doc>
